
version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0 
  docker: circleci/docker@2.0.1
  snyk: snyk/snyk@1.1.2

commands:
  destroy-cluster:
    description: Destroy EKS Cluster.
    parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
          
    steps:
      - run:
          name: Destroy environments
          command: |
            #aws cloudformation delete-stack --stack-name eksctl-<< parameters.cluster-name >>-nodegroup-ng --region us-east-2
            aws cloudformation delete-stack --stack-name eksctl-<< parameters.cluster-name >>-cluster --region us-east-2

jobs:
  lintcheck:
    docker:
      - image: circleci/python:3.7.3-stretch
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
              python3 -m venv ~/.capstone
              . ~/.capstone/bin/activate
              make install
      - save_cache:
          paths:
            - .~/.capstone
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
              . ~/.capstone/bin/activate
              make lint
            
  build-and-push-image:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: |
            # Build the docker image and tagging it
            docker build -t rajkumar080/devops-capstone-app:latest .
      - run:
          name: Push Docker Image to docker hub
          command: |
            # List docker images
            docker images ls
            # Login to docker hub
            docker login -u rajkumar080 --password Samsung@1498
            # Pusing docker images to git hub
            docker push rajkumar080/devops-capstone-app:latest
          
# Creation of Cluster         
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string        
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          node-type: t2.medium
      

  
# Deployment of Cluster 
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployments/nginx-deployment.yaml
          resource-name: deployments/capstone-devpos-cluster
  
  # Test the Cluster               
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region:  $AWS_REGION
      - run:
          name: checking deployed kubernets clusters details.
          command: | 
            echo "Getting different cluster details"
            kubectl get services
            kubectl get pods
            kubectl describe pods
            kubectl get nodes
            kubectl get deployment
            kubectl get services -o wide

  undeploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-2"
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/delete-resource:
          resource-types: "deployment,service"
          label-selector: "app=CAPSTONE"
          wait: true
      - run:
          name: Check on pod status
          command: |
            kubectl get pods
            kubectl get nodes
      - destroy-cluster:
          cluster-name: << parameters.cluster-name >>
    
workflows:
  deployment:
    jobs:
      - lintcheck
      - build-and-push-image:
          requires:
            - lintcheck
      - create-cluster:
          cluster-name: capstone-devpos-cluster
          requires:
            - build-and-push-image
      - create-deployment:
          cluster-name: capstone-devpos-cluster
          requires:
            - create-cluster
      - test-cluster:
          cluster-name: capstone-devpos-cluster
          requires:
            - create-deployment
      - undeploy-application:
          cluster-name: capstone-devpos-cluster
          aws-region: $AWS_DEFAULT_REGION
          requires:
            - test-cluster