version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0

jobs:
  lintcheck:
    docker:
      - image: circleci/python:3.7.3-stretch
    working_directory: ~/app
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
              python3 -m venv ~/.devops
              . ~/.devops/bin/activate
              make install
      - save_cache:
          paths:
            - .~/.devops
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
              . ~/.devops/bin/activate
              make lint
              
  push-build-image:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build Docker Image 
          command: |
            # Login to docker hub
            docker login --username rajkumar080 --password Samsung@1498
            # Build the docker image
            docker build --tag=capstondockerapp2022 .
            # Add the changes to the docker image
            #docker-compose up -d
            # List docker images
            docker images ls
            # Tagging and Push image to a docker repository
            docker tag capstondockerapp2022 rajkumar080/capstondockerapp2022
            docker push rajkumar080/capstondockerapp2022
            
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string        
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t3.small
          nodes-max: 3
          ssh-access: false
          ssh-public-key: ''

  cluster-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployments/nginx-deployment.yaml
          resource-name: deployments/capstonedevops
      - kubernetes/create-or-update-resource:
          resource-file-path: deployments/app-service.yaml
  
  # Test the Cluster               
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region:  $AWS_REGION
      - run:
          name: checking deployed kubernets clusters details.
          command: | 
            echo "Getting different cluster details"
            kubectl get services
            kubectl get pods
            kubectl describe pods
            kubectl get nodes
            kubectl get deployment
            kubectl get services -o wide      
  
workflows:
  deployment:
    jobs:
      - lintcheck
      - push-build-image:
          requires:
            - lintcheck
      - create-cluster:
          cluster-name: capstone-devpos-cluster
          requires:
            - push-build-image
      - test-cluster:
          cluster-name: capstone-devpos-cluster
          requires:
            - create-cluster
      - cluster-deployment:
          cluster-name: capstone-devpos-cluster
          requires:
            - create-cluster
      - test-cluster:
          cluster-name: capstone-devpos-cluster
          requires:
            - cluster-deployment